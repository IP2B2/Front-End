name: PR Review/Conflict Labeler

on:
  pull_request:
    types: [reopened, opened, synchronize]
  pull_request_review:
    types: [submitted]

permissions:
  pull-requests: write
  issues: write
  actions: write

jobs:
  label-pr-status:
    if: github.event.review.state == 'CHANGES_REQUESTED' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const repo = context.repo;

            const { data: existingLabels } = await github.rest.issues.listLabelsOnIssue({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: pr.number
            });
            const currentLabels = existingLabels.map(l => l.name);

            // Handle CHANGES_REQUESTED
            if (context.eventName === 'pull_request_review' && context.payload.review.state === 'CHANGES_REQUESTED') {
              if (!currentLabels.includes('needs-work')) {
                await github.rest.issues.addLabels({
                  owner: repo.owner,
                  repo: repo.repo,
                  issue_number: pr.number,
                  labels: ['needs-work']
                });
              }
              // Remove ready-to-run if present
              if (currentLabels.includes('ready-to-run')) {
                await github.rest.issues.removeLabel({
                  owner: repo.owner,
                  repo: repo.repo,
                  issue_number: pr.number,
                  name: 'ready-to-run'
                }).catch(() => {});
              }
              return;
            }

            // Check if PR has conflicts
            const { data: mergeablePR } = await github.rest.pulls.get({
              owner: repo.owner,
              repo: repo.repo,
              pull_number: pr.number
            });

            if (mergeablePR.mergeable === false) {
              if (!currentLabels.includes('has-conflicts')) {
                await github.rest.issues.addLabels({
                  owner: repo.owner,
                  repo: repo.repo,
                  issue_number: pr.number,
                  labels: ['has-conflicts']
                });
              }
              if (currentLabels.includes('ready-to-run')) {
                await github.rest.issues.removeLabel({
                  owner: repo.owner,
                  repo: repo.repo,
                  issue_number: pr.number,
                  name: 'ready-to-run'
                }).catch(() => {});
              }
              return;
            }

            // If everything is clean and "needs-work"/"has-conflicts" exist, remove them
            for (const label of ['needs-work', 'has-conflicts']) {
              if (currentLabels.includes(label)) {
                await github.rest.issues.removeLabel({
                  owner: repo.owner,
                  repo: repo.repo,
                  issue_number: pr.number,
                  name: label
                }).catch(() => {});
              }
            }
